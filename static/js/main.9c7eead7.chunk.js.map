{"version":3,"sources":["API.ts","utils.ts","components/QuestionCard.tsx","components/ScoreCard.tsx","App.styles.ts","components/SpinLoader.tsx","components/DifficultyControl.tsx","components/QNumControl.tsx","components/ReplayBtn.tsx","App.tsx","index.tsx"],"names":["fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","BtnContainer","CategoryTag","p","DifficultyTag","QuestionText","QuestionCard","category","callback","userAnswer","questionNumber","totalQuestions","getDifficultyColor","className","dangerouslySetInnerHTML","__html","answer","index","correctAnswer","disabled","value","onClick","style","color","border","toUpperCase","ScoreCard","score","questionsAmount","scoreFeedback","margin","round","fontSize","role","aria-label","GlobalStyle","createGlobalStyle","SpinLoader","type","height","width","timeout","StyledControl","FormControl","StyledSelect","Select","StyledLabel","InputLabel","DifficultyControl","props","onChange","useState","diffValue","setDiffValue","StylesProvider","injectFirst","focused","ev","target","MenuItem","StyledSlider","Slider","marks","label","QNumControl","shrink","defaultValue","step","min","max","onChangeCommitted","valueLabelDisplay","Button","IconButton","RestartBtn","ControlsContainer","SpinnerContainer","CalculatingContainer","App","loading","setLoading","calculating","setCalculating","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","setScore","gameOver","setGameOver","gameComplete","setGameComplete","setQuestionsAmount","setDifficulty","useEffect","length","setTimeout","startQuiz","newQuestions","resetQuiz","newValue","e","currentTarget","prev","answerObject","undefined","nextQ","ReplayBtn","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9c7eead7.chunk.js","sourcesContent":["\r\nimport { shuffleAnswers } from './utils'\r\n\r\nexport type Question = {\r\n    category: string;\r\n    correct_answer: string;\r\n    difficulty: string;\r\n    incorrect_answers: string[];\r\n    question: string;\r\n    type: string;\r\n}\r\n\r\nexport type QuestionState = Question & { answers: string[] };\r\n\r\nexport const fetchQuizQuestions = async (amount: number, difficulty: string): Promise<QuestionState[]> => {\r\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\r\n    const data = await (await fetch(endpoint)).json();\r\n    return data.results.map((question: Question) => ({\r\n        ...question,\r\n        answers: shuffleAnswers([...question.incorrect_answers, question.correct_answer])\r\n    }))\r\n};","export const shuffleAnswers = (array: any[]) => {\r\n    return [ ...array ].sort( () => Math.random() - 0.5 );\r\n}","import React from \"react\";\r\nimport { AnswerObject } from \"../App\";\r\nimport styled from \"styled-components\";\r\n\r\ntype QuestionCardProps = {\r\n  question: string;\r\n  category: string;\r\n  difficulty: string;\r\n  answers: string[];\r\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n  userAnswer: AnswerObject | undefined;\r\n  questionNumber: number;\r\n  totalQuestions: number;\r\n};\r\n\r\ntype ButtonWrapperProps = {\r\n  correct: boolean;\r\n  userClicked: boolean;\r\n};\r\n\r\nconst Wrapper = styled.div`\r\n  max-width: 1100px;\r\n  background: #f1f2f6;\r\n  border-radius: 10px;\r\n  border: none;\r\n  padding: 16px;\r\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n  text-align: center;\r\n`;\r\n\r\nconst ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n  transition: all 0.3s ease;\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n  button {\r\n    cursor: pointer;\r\n    user-select: none;\r\n    font-size: 0.85rem;\r\n    width: 100%;\r\n    min-height: 45px;\r\n    height: 100%;\r\n    background: ${({ correct, userClicked }) =>\r\n      correct ? \"#26bb6c\" : !correct && userClicked ? \"#fa2828\" : \"#003249\"};\r\n    border: none;\r\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n    border-radius: 10px;\r\n    color: #fff;\r\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\r\n  }\r\n  button span {\r\n    display: inline-block;\r\n    height: fit-content;\r\n    width: 100%;\r\n    margin: 5px 0;\r\n  }\r\n`;\r\n\r\nconst BtnContainer = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  grid-row: 1fr 1fr;\r\n  grid-column-gap: 10px;\r\n  grid-row-gap: 10px;\r\n`;\r\n\r\nconst CategoryTag = styled.p`\r\n  display: inline-block;\r\n  background-color: #a4bfcf;\r\n  color: #fff;\r\n  font-size: 0.85rem !important;\r\n  padding: 3px 8px;\r\n  border-radius: 20px;\r\n`;\r\n\r\nconst DifficultyTag = styled.p`\r\n  display: inline-block;\r\n  font-weight: bold;\r\n  font-size: 12px;\r\n  border-radius: 20px;\r\n  padding: 2px 5px;\r\n  margin-top: 16px;\r\n`;\r\n\r\nconst QuestionText = styled.p`\r\n  margin-bottom: 20px;\r\n  font-weight: lighter;\r\n`;\r\n\r\nconst QuestionCard: React.FC<QuestionCardProps> = ({\r\n  question,\r\n  category,\r\n  difficulty,\r\n  answers,\r\n  callback,\r\n  userAnswer,\r\n  questionNumber,\r\n  totalQuestions,\r\n}) => {\r\n  const getDifficultyColor = (difficulty: string): string => {\r\n    switch (difficulty) {\r\n      case \"easy\":\r\n        return \"#34eb52\";\r\n      case \"medium\":\r\n        return \"#eb7734\";\r\n      case \"hard\":\r\n        return \"#eb3434\";\r\n      default:\r\n        return \"#000000\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <p className=\"number\">\r\n        Question: {questionNumber}/{totalQuestions}\r\n      </p>\r\n      <CategoryTag>{category}</CategoryTag>\r\n      <QuestionText dangerouslySetInnerHTML={{ __html: question }} />\r\n      <BtnContainer>\r\n        {answers.map((answer, index) => {\r\n          return (\r\n            <ButtonWrapper\r\n              key={index}\r\n              correct={userAnswer?.correctAnswer === answer}\r\n              userClicked={userAnswer?.answer === answer}\r\n            >\r\n              <button\r\n                disabled={userAnswer ? true : false}\r\n                value={answer}\r\n                onClick={callback}\r\n              >\r\n                <span dangerouslySetInnerHTML={{ __html: answer }} />\r\n              </button>\r\n            </ButtonWrapper>\r\n          );\r\n        })}\r\n      </BtnContainer>\r\n      <DifficultyTag\r\n        style={{\r\n          color: getDifficultyColor(difficulty),\r\n          border: `1px solid ${getDifficultyColor(difficulty)}`,\r\n        }}\r\n      >\r\n        {difficulty.toUpperCase()}\r\n      </DifficultyTag>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default QuestionCard;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\ntype ScoreCardProps = {\r\n  score: number;\r\n  questionsAmount: number;\r\n  onClick: () => void;\r\n};\r\n\r\nconst Wrapper = styled.div`\r\n  width: 300px;\r\n  background: #f1f2f6;\r\n  border-radius: 10px;\r\n  border: none;\r\n  padding: 16px;\r\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n  text-align: center;\r\n`;\r\n\r\nconst ScoreCard: React.FC<ScoreCardProps> = ({\r\n  score,\r\n  questionsAmount,\r\n  onClick,\r\n}) => {\r\n  const scoreFeedback = (\r\n    <h3 style={{ margin: \"8px 0\" }}>\r\n      Your total score is {Math.round((score / questionsAmount) * 100)}%\r\n    </h3>\r\n  );\r\n\r\n  return (\r\n    <Wrapper>\r\n      {score === 0 && (\r\n        <>\r\n          <div style={{ fontSize: \"40px\" }} role=\"img\" aria-label=\"sad\">\r\n            &#128549;\r\n          </div>\r\n          {scoreFeedback}\r\n          <p>You had no correct answers</p>\r\n        </>\r\n      )}\r\n\r\n      {score < questionsAmount / 2 && score !== 0 && (\r\n        <>\r\n          <div style={{ fontSize: \"40px\" }} role=\"img\" aria-label=\"neutral\">\r\n            &#128528;\r\n          </div>\r\n          {scoreFeedback}\r\n          <p>Not great, not terrible...</p>\r\n        </>\r\n      )}\r\n\r\n      {score > questionsAmount / 2 && score < questionsAmount && (\r\n        <>\r\n          <div style={{ fontSize: \"40px\" }} role=\"img\" aria-label=\"happy\">\r\n            &#128578;\r\n          </div>\r\n          {scoreFeedback}\r\n          <p>Well done!</p>\r\n        </>\r\n      )}\r\n\r\n      {score === questionsAmount && (\r\n        <>\r\n          <div style={{ fontSize: \"40px\" }} role=\"img\" aria-label=\"smile\">\r\n            &#128515;\r\n          </div>\r\n          {scoreFeedback}\r\n          <p>Perfect!!! You are a real Quizard!</p>\r\n        </>\r\n      )}\r\n\r\n      <button className=\"start\" onClick={onClick}>\r\n        Play again?\r\n      </button>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default ScoreCard;\r\n","import styled, { createGlobalStyle } from 'styled-components';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        height: 100%\r\n    }\r\n\r\n    body {\r\n        background: linear-gradient(0deg, rgba(71,135,164,1) 0%, rgba(0,96,140,1) 50%, rgba(15,61,82,1) 100%);\r\n        margin: 0;\r\n        padding: 0 20px;\r\n        justify-content: center;\r\n    }\r\n    * {\r\n        box-sizing: border-box;\r\n        font-family: 'Roboto', sans-serif;\r\n    }\r\n    p {\r\n      margin: 6px 0;\r\n    }\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  > p {\r\n    color: #fff;\r\n  }\r\n  .score {\r\n    color: #fff;\r\n    font-size: 2rem;\r\n    margin: 0;\r\n    margin-bottom: 16px;\r\n  }\r\n  h1 {\r\n    font-family: 'Chango', cursive;\r\n    background: #f1f2f6;\r\n    font-weight: 400;\r\n    background-size: 100%;\r\n    background-clip: text;\r\n    -webkit-background-clip: text;\r\n    -webkit-text-fill-color: transparent;\r\n    -moz-background-clip: text;\r\n    -moz-text-fill-color: transparent;\r\n    filter: drop-shadow(2px 2px #0f3d52);\r\n    font-size: 45px;\r\n    text-align: center;\r\n    margin: 20px;\r\n  }\r\n  .start, .next {\r\n    cursor: pointer;\r\n    background-color: #ff795e;\r\n    color: #fff;\r\n    border: none;\r\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n    border-radius: 10px;\r\n    height: 40px;\r\n    margin: 20px 0;\r\n    padding: 0 40px;\r\n  }\r\n  .start {\r\n    max-width: 100%;\r\n  }\r\n\r\n  sub {\r\n    color: rgba(0, 0, 0, 0.75);\r\n  }\r\n\r\n  .MuiInput-underline:after {\r\n    border-bottom: 2px solid #003249;\r\n  }\r\n\r\n  @media screen and (max-width: 600px) {\r\n    h1 {\r\n      font-size: 30px;\r\n    }\r\n  }\r\n`;","import React from \"react\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\n\r\ntype SpinnerProps = {\r\n  type:\r\n    | \"Audio\"\r\n    | \"BallTriangle\"\r\n    | \"Bars\"\r\n    | \"Circles\"\r\n    | \"Grid\"\r\n    | \"Hearts\"\r\n    | \"Oval\"\r\n    | \"Puff\"\r\n    | \"Rings\"\r\n    | \"TailSpin\"\r\n    | \"ThreeDots\"\r\n    | \"Watch\"\r\n    | \"RevolvingDot\"\r\n    | \"Triangle\"\r\n    | \"Plane\"\r\n    | \"MutatingDots\"\r\n    | \"CradleLoader\";\r\n  color: string;\r\n  height: number;\r\n  width: number;\r\n  timeout: number;\r\n};\r\n\r\nexport const SpinLoader: React.FC<SpinnerProps> = ({\r\n  type,\r\n  color,\r\n  height,\r\n  width,\r\n  timeout,\r\n}) => {\r\n  return (\r\n    <Loader\r\n      type={type}\r\n      color={color}\r\n      height={height}\r\n      width={width}\r\n      timeout={timeout}\r\n    />\r\n  );\r\n};\r\n\r\nexport default SpinLoader;\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport { StylesProvider } from \"@material-ui/core/styles\";\r\n\r\ntype DifficultyControlProps = {\r\n  onChange: (arg: string) => void;\r\n};\r\n\r\nconst StyledControl = styled(FormControl)`\r\n  && {\r\n    font-size: 22px;\r\n    color: #003249;\r\n    font-family: \"Roboto\", sans-serif;\r\n  }\r\n`;\r\n\r\nconst StyledSelect = styled(Select)`\r\n  && {\r\n    color: #003249;\r\n    font-size: 16px;\r\n  }\r\n  .MuiSelect-selectMenu {\r\n    color: #003249;\r\n  }\r\n`;\r\n\r\nconst StyledLabel = styled(InputLabel)`\r\n  && {\r\n    color: #003249;\r\n    font-size: 16px;\r\n  }\r\n`;\r\n\r\nconst DifficultyControl = (props: DifficultyControlProps): JSX.Element => {\r\n  const { onChange } = props;\r\n  const [diffValue, setDiffValue] = useState<string>(\"easy\");\r\n\r\n  const handleDiff = (ev: any) => {\r\n    onChange(ev.target.value);\r\n    setDiffValue(ev.target.value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <StylesProvider injectFirst>\r\n        <StyledControl>\r\n          <StyledLabel focused={false}>Difficulty</StyledLabel>\r\n          <StyledSelect value={diffValue} onChange={handleDiff}>\r\n            <MenuItem value=\"easy\">Easy</MenuItem>\r\n            <MenuItem value=\"medium\">Medium</MenuItem>\r\n            <MenuItem value=\"hard\">Hard</MenuItem>\r\n          </StyledSelect>\r\n        </StyledControl>\r\n      </StylesProvider>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DifficultyControl;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\n\r\ntype QNumControlProps = {\r\n  amount: number;\r\n  onChange: (newValue: number) => void;\r\n};\r\n\r\nconst StyledLabel = styled(InputLabel)`\r\n  && {\r\n    color: #003249;\r\n    font-size: 16px;\r\n  }\r\n`;\r\n\r\nconst StyledSlider = styled(Slider)`\r\n  && {\r\n    color: #003249;\r\n    font-size: 16px;\r\n  }\r\n  .MuiSlider-markLabelActive {\r\n    color: #003249;\r\n  }\r\n`;\r\n\r\nconst marks = [\r\n  {\r\n    value: 5,\r\n    label: \"5\",\r\n  },\r\n  {\r\n    value: 10,\r\n    label: \"10\",\r\n  },\r\n  {\r\n    value: 15,\r\n    label: \"15\",\r\n  },\r\n  {\r\n    value: 20,\r\n    label: \"20\",\r\n  },\r\n  {\r\n    value: 25,\r\n    label: \"25\",\r\n  },\r\n  {\r\n    value: 30,\r\n    label: \"30\",\r\n  },\r\n];\r\n\r\nconst QNumControl = (props: QNumControlProps): JSX.Element => {\r\n  const { onChange } = props;\r\n\r\n  const handleAmount = (ev: any, value: any) => {\r\n    onChange(value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <StyledLabel shrink={true}>Questions</StyledLabel>\r\n      <StyledSlider\r\n        defaultValue={5}\r\n        step={5}\r\n        min={5}\r\n        max={30}\r\n        marks={marks}\r\n        onChangeCommitted={handleAmount}\r\n        valueLabelDisplay=\"off\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default QNumControl;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport ReplayIcon from \"@material-ui/icons/Replay\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n\r\ntype RestartBtnProps = {\r\n  onClick: () => void;\r\n};\r\n\r\nconst Button = styled(IconButton)`\r\n  && {\r\n    position: absolute;\r\n    bottom: 22px;\r\n    right: 22px;\r\n    color: #003249;\r\n    background-color: #fff;\r\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n    :focus {\r\n      background-color: #fff;\r\n    }\r\n  }\r\n`;\r\n\r\nfunction RestartBtn(props: RestartBtnProps): JSX.Element {\r\n  const { onClick } = props;\r\n  return (\r\n    <Button onClick={onClick}>\r\n      <ReplayIcon />\r\n    </Button>\r\n  );\r\n}\r\n\r\nexport default RestartBtn;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { fetchQuizQuestions } from \"./API\";\r\nimport QuestionCard from \"./components/QuestionCard\";\r\nimport ScoreCard from \"./components/ScoreCard\";\r\nimport { QuestionState } from \"./API\";\r\nimport { GlobalStyle, Wrapper } from \"./App.styles\";\r\nimport SpinLoader from \"./components/SpinLoader\";\r\nimport DifficultyControl from \"./components/DifficultyControl\";\r\nimport QNumControl from \"./components/QNumControl\";\r\nimport ReplayBtn from \"./components/ReplayBtn\";\r\n\r\nexport type AnswerObject = {\r\n  question: string;\r\n  answer: string;\r\n  correct: boolean;\r\n  correctAnswer: string;\r\n};\r\n\r\nconst ControlsContainer = styled.div`\r\n  display: flex;\r\n  background-color: white;\r\n  border-radius: 8px;\r\n  padding: 16px;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  gap: 40px;\r\n  width: 300px;\r\n`;\r\n\r\nconst SpinnerContainer = styled.div`\r\n  display: flex;\r\n  color: #fff;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 16px;\r\n  font-size: 25px;\r\n`;\r\n\r\nconst CalculatingContainer = styled.div`\r\n  display: flex;\r\n  color: #fff;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 16px;\r\n  font-size: 25px;\r\n  width: 300px;\r\n  height: 150px;\r\n`;\r\n\r\nconst App: React.FC = () => {\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [calculating, setCalculating] = useState<boolean>(false);\r\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\r\n  const [number, setNumber] = useState<number>(0);\r\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\r\n  const [score, setScore] = useState<number>(0);\r\n  const [gameOver, setGameOver] = useState<boolean>(true);\r\n  const [gameComplete, setGameComplete] = useState<boolean>(false);\r\n  const [questionsAmount, setQuestionsAmount] = useState<number>(5);\r\n  const [difficulty, setDifficulty] = useState<string>(\"easy\");\r\n\r\n  useEffect(() => {\r\n    if (userAnswers.length === questionsAmount) {\r\n      setCalculating(true);\r\n      setTimeout(() => {\r\n        setGameComplete(true);\r\n        setCalculating(false);\r\n      }, 2000);\r\n    }\r\n  }, [number, userAnswers, questionsAmount]);\r\n\r\n  const startQuiz = async () => {\r\n    setLoading(true);\r\n    setGameOver(false);\r\n    setGameComplete(false);\r\n\r\n    const newQuestions = await fetchQuizQuestions(questionsAmount, difficulty);\r\n    setQuestions(newQuestions);\r\n    setScore(0);\r\n    setUserAnswers([]);\r\n    setNumber(0);\r\n    setLoading(false);\r\n  };\r\n\r\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>): void => {\r\n    if (!gameOver) {\r\n      const answer = e.currentTarget.value;\r\n      const correct = questions[number].correct_answer === answer;\r\n\r\n      if (correct) setScore((prev) => prev + 1);\r\n\r\n      const answerObject = {\r\n        question: questions[number].question,\r\n        answer,\r\n        correct,\r\n        correctAnswer: questions[number].correct_answer,\r\n      };\r\n      setUserAnswers((prev) => [...prev, answerObject]);\r\n    }\r\n  };\r\n\r\n  const changeDiff = (newValue: string) => {\r\n    setDifficulty(newValue);\r\n  };\r\n\r\n  const changeAmount = (newValue: number) => {\r\n    setQuestionsAmount(newValue);\r\n  };\r\n\r\n  const nextQuestion = () => {\r\n    const nextQ = number + 1;\r\n    if (nextQ === questionsAmount) {\r\n      setGameOver(true);\r\n    } else {\r\n      setNumber(nextQ);\r\n    }\r\n  };\r\n\r\n  const resetQuiz = () => {\r\n    setScore(0);\r\n    setGameOver(true);\r\n    setGameComplete(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <Wrapper>\r\n        <h1>InQUIZitive</h1>\r\n        {gameOver ? (\r\n          <ControlsContainer>\r\n            <DifficultyControl onChange={changeDiff} />\r\n            <QNumControl amount={questionsAmount} onChange={changeAmount} />\r\n            <button className=\"start\" onClick={startQuiz}>\r\n              Start\r\n            </button>\r\n          </ControlsContainer>\r\n        ) : null}\r\n\r\n        {loading && (\r\n          <SpinnerContainer>\r\n            <p>Loading Questions...</p>\r\n            <SpinLoader\r\n              type=\"Puff\"\r\n              color=\"#f1f2f6\"\r\n              height={250}\r\n              width={250}\r\n              timeout={0}\r\n            />\r\n          </SpinnerContainer>\r\n        )}\r\n        {!loading && !gameOver && !gameComplete && (\r\n          <QuestionCard\r\n            question={questions[number].question}\r\n            category={questions[number].category}\r\n            difficulty={difficulty}\r\n            answers={questions[number].answers}\r\n            callback={checkAnswer}\r\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\r\n            questionNumber={number + 1}\r\n            totalQuestions={questionsAmount}\r\n          />\r\n        )}\r\n        {!gameOver &&\r\n        !loading &&\r\n        userAnswers.length === number + 1 &&\r\n        number !== questionsAmount - 1 ? (\r\n          <button className=\"next\" onClick={nextQuestion}>\r\n            Next Question\r\n          </button>\r\n        ) : null}\r\n        {gameComplete && (\r\n          <ScoreCard\r\n            score={score}\r\n            questionsAmount={questionsAmount}\r\n            onClick={resetQuiz}\r\n          />\r\n        )}\r\n        {calculating && (\r\n          <CalculatingContainer>\r\n            <p>Calculating Score... &#x231b;</p>\r\n            <SpinLoader\r\n              type=\"TailSpin\"\r\n              color=\"#ffffff\"\r\n              height={50}\r\n              width={50}\r\n              timeout={0}\r\n            />\r\n          </CalculatingContainer>\r\n        )}\r\n        <ReplayBtn onClick={resetQuiz} />\r\n      </Wrapper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}